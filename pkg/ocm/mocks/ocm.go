// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/ocm-agent/pkg/handlers (interfaces: OCMClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	v10 "github.com/openshift-online/ocm-sdk-go/servicelogs/v1"
)

// MockOCMClient is a mock of OCMClient interface.
type MockOCMClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCMClientMockRecorder
}

// MockOCMClientMockRecorder is the mock recorder for MockOCMClient.
type MockOCMClientMockRecorder struct {
	mock *MockOCMClient
}

// NewMockOCMClient creates a new mock instance.
func NewMockOCMClient(ctrl *gomock.Controller) *MockOCMClient {
	mock := &MockOCMClient{ctrl: ctrl}
	mock.recorder = &MockOCMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCMClient) EXPECT() *MockOCMClientMockRecorder {
	return m.recorder
}

// GetLimitedSupportReasons mocks base method.
func (m *MockOCMClient) GetLimitedSupportReasons(arg0 string) ([]*v1.LimitedSupportReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitedSupportReasons", arg0)
	ret0, _ := ret[0].([]*v1.LimitedSupportReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimitedSupportReasons indicates an expected call of GetLimitedSupportReasons.
func (mr *MockOCMClientMockRecorder) GetLimitedSupportReasons(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitedSupportReasons", reflect.TypeOf((*MockOCMClient)(nil).GetLimitedSupportReasons), arg0)
}

// RemoveLimitedSupport mocks base method.
func (m *MockOCMClient) RemoveLimitedSupport(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLimitedSupport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLimitedSupport indicates an expected call of RemoveLimitedSupport.
func (mr *MockOCMClientMockRecorder) RemoveLimitedSupport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLimitedSupport", reflect.TypeOf((*MockOCMClient)(nil).RemoveLimitedSupport), arg0, arg1)
}

// SendLimitedSupport mocks base method.
func (m *MockOCMClient) SendLimitedSupport(arg0 string, arg1 *v1.LimitedSupportReason) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLimitedSupport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLimitedSupport indicates an expected call of SendLimitedSupport.
func (mr *MockOCMClientMockRecorder) SendLimitedSupport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLimitedSupport", reflect.TypeOf((*MockOCMClient)(nil).SendLimitedSupport), arg0, arg1)
}

// SendServiceLog mocks base method.
func (m *MockOCMClient) SendServiceLog(arg0 *v10.LogEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendServiceLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendServiceLog indicates an expected call of SendServiceLog.
func (mr *MockOCMClientMockRecorder) SendServiceLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendServiceLog", reflect.TypeOf((*MockOCMClient)(nil).SendServiceLog), arg0)
}
